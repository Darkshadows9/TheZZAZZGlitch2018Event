//Made by Runea
type Image = [u8; 128];
type Input = [u8; 10];
type Table = [u8; 256];

const TABLE: Table = [
    0x6D, 0xE5, 0x9A, 0x4C, 0xC7, 0x35, 0x1A, 0x3B, 0x78, 0xFB, 0x02, 0x84, 0x7B, 0x4B, 0x4A, 0xC0,
    0x6C, 0x9B, 0x36, 0x1F, 0x34, 0x4D, 0xCE, 0x24, 0xB9, 0xE0, 0x29, 0x54, 0x99, 0x67, 0x19, 0x21,
    0x73, 0xCB, 0x57, 0x46, 0x2F, 0xDF, 0x5E, 0x43, 0x72, 0x7A, 0x28, 0xB0, 0x0F, 0xF6, 0x49, 0xE2,
    0x12, 0xF0, 0x09, 0x44, 0xCD, 0x69, 0x95, 0x6B, 0xD3, 0xD1, 0xE6, 0x87, 0x92, 0xF7, 0xDD, 0x89,
    0xC2, 0x63, 0xEA, 0x1D, 0xBB, 0xA7, 0x0A, 0x48, 0x93, 0x90, 0xC1, 0x08, 0x14, 0x1B, 0x79, 0x91,
    0x65, 0xF8, 0x0D, 0xD8, 0xD0, 0x47, 0xE1, 0xF9, 0x15, 0x9E, 0x05, 0x41, 0xC8, 0xB7, 0x0E, 0x7E,
    0x22, 0xE9, 0xDA, 0xB1, 0x62, 0x13, 0x26, 0x42, 0xAB, 0xD4, 0x5C, 0x4F, 0x74, 0xC4, 0x04, 0x66,
    0xD6, 0x5F, 0x38, 0x4E, 0x10, 0xA5, 0x75, 0x52, 0xAA, 0xFE, 0xF2, 0xA3, 0x70, 0x25, 0x82, 0x3A,
    0x0C, 0x9D, 0x97, 0x56, 0x7D, 0xD5, 0xA4, 0xE8, 0xAF, 0x11, 0xB8, 0x33, 0xE4, 0xF4, 0x3E, 0x60,
    0xCC, 0x5A, 0xFD, 0x71, 0xDE, 0x94, 0x7F, 0x40, 0x53, 0xD7, 0xF3, 0x03, 0x96, 0xBF, 0x17, 0x2C,
    0x98, 0xF5, 0x50, 0x8A, 0x88, 0x59, 0xAC, 0x6E, 0x8E, 0x77, 0xC5, 0x58, 0x8D, 0xC9, 0xB5, 0xBE,
    0x3F, 0xEC, 0xA2, 0xBC, 0xA0, 0x23, 0x0B, 0x85, 0xB2, 0x86, 0x07, 0x61, 0xD9, 0xA1, 0x8F, 0x7C,
    0x01, 0x64, 0xAD, 0x3C, 0xFF, 0x06, 0x8B, 0xA8, 0xE3, 0x76, 0x31, 0x80, 0xEF, 0x81, 0x51, 0x32,
    0x45, 0xDB, 0x3D, 0x1E, 0x20, 0xBA, 0x8C, 0x27, 0x30, 0x6A, 0xD2, 0xB3, 0x18, 0xB4, 0xC6, 0xFC,
    0x55, 0x1C, 0xDC, 0xEB, 0xAE, 0xF1, 0xA6, 0xCA, 0x6F, 0x5B, 0x9F, 0x16, 0x9C, 0xCF, 0xB6, 0xEE,
    0x39, 0xA9, 0x2A, 0x68, 0x37, 0xFA, 0x5D, 0x83, 0x00, 0x2D, 0xED, 0x2E, 0x2B, 0xE7, 0xBD, 0xC3,
];

const IMAGE: Image = [
    0x7D, 0xBC, 0x5D, 0x92, 0xC7, 0x66, 0xFB, 0x16, 0xB3, 0xC7, 0x25, 0x39, 0x07, 0x65, 0xE4, 0x00,
    0x2E, 0xCE, 0xBC, 0xA8, 0xDF, 0x6A, 0x85, 0xE7, 0x8E, 0x5E, 0x49, 0x51, 0xD9, 0x8E, 0xFC, 0x5C,
    0xD5, 0xCA, 0x3E, 0x0E, 0x90, 0xF8, 0x6A, 0x3E, 0x38, 0xC1, 0xBE, 0x33, 0xDC, 0x4B, 0xCE, 0x04,
    0x50, 0x4D, 0x50, 0xA3, 0xE7, 0x80, 0x88, 0xDB, 0xEF, 0x6D, 0xC8, 0xB4, 0x3F, 0xEB, 0x3B, 0x39,
    0xA0, 0x64, 0xEE, 0xC4, 0xE3, 0xA0, 0x89, 0x2F, 0x83, 0xD1, 0x98, 0x62, 0xB6, 0xFF, 0xEB, 0x07,
    0x0F, 0xC2, 0xE8, 0xDB, 0x53, 0xDA, 0x0B, 0xFA, 0x16, 0x53, 0x9B, 0x51, 0x6F, 0xB3, 0xD8, 0x5E,
    0xBD, 0x05, 0xD1, 0xD6, 0x0D, 0xF6, 0x66, 0xBC, 0x89, 0x84, 0x44, 0xAD, 0x68, 0x09, 0x4C, 0x00,
    0x9F, 0x60, 0x8D, 0x79, 0xAB, 0x73, 0xF8, 0x12, 0x98, 0xE1, 0x56, 0x62, 0x36, 0x9B, 0xDF, 0xE7,
];

const TH: usize = 8; // threshold for the minimum amount of leading zeros the solution must start with
const SEED: Input = [0xf6; 10]; // when input = "0000000000"

fn main() {
    let starting_time = std::time::Instant::now(); // for time keeping.
    let mut mc = 0;
    loop {
        for i in 0..mc + 10_000_000 {
            let mut input = SEED;
            let mut c = i + mc;
            for n in (0..0x0a).rev() {
                input[n] += (c % 10) as u8;
                c /= 10;
            }
            for _ in 0..0x19 {
                let mut b = input[9];
                for n in input.iter_mut() {
                    let mut a = *n;
                    a = (a >> 1) | (a << 7);
                    a = TABLE[(a ^ 0x5c).overflowing_add(0x1e).0 as usize] ^ b;
                    b = a;
                    *n = a;
                }
            }

            if IMAGE
                .iter()
                .zip((0..10).cycle())
                .map(|(v, counter)| {
                    let p = input[counter];
                    input[counter] = TABLE[input[counter] as usize];
                    p ^ v
                })
                .take_while(|&v| v == 0)
                .count() > TH
            {
                println!("dat key: {}", i + mc);
                println!("final time: {}secs", starting_time.elapsed().as_secs());
                return;
            }
        }
        println!(
            "nothing found before {}0_000_000, time: {} secs",
            mc,
            starting_time.elapsed().as_secs()
        );
        mc += 1;
    }
}

/* BEFORE CLEANUP

fn main() {
    let now = std::time::Instant::now();
    let mut ret = 0;
    // start from 60000_00000 for solution in under 600 secs (on my machine)
    for i in 0..1_00000_00000u64 {
        let mut input = SEED;
        let mut c = i;

        for n in (0..0x0a).rev() {
            // modified to look like the python one
            input[n] += (c % 10) as u8;
            c /= 10;
        }

        for _ in 0..0x19 {
            input = shuffle_input(input);
        }
        let image = decoding(input, IMAGE);

        if image.iter().take_while(|&v| *v == 0).count() > TH {
            ret = i;
            break;
        }
        if i % 10_000_000 == 0 {
            println!(
                "nothing below {}0_000_000, {} secs",
                i / 10_000_000,
                now.elapsed().as_secs()
            );
        }
    }
    println!("dat key: {}", ret);
    println!("time: {}secs", now.elapsed().as_secs());
}

fn shuffle_input(mut input: Input) -> Input {
    let mut b = input[9];
    for i in input.iter_mut() {
        let mut a = *i;
        a = (a >> 1) | (a << 7); // 'fix' copied from python code. everything else was mostly like this before.
        a ^= 0x5c;
        a = a.overflowing_add(0x1e).0;
        a = TABLE[a as usize];
        a ^= b;
        b = a;
        *i = a;
    }
    input
}

fn decoding(mut input: Input, mut image: Image) -> Image {
    let mut counter = 0;
    for p in image.iter_mut() {
        *p ^= input[counter];
        input[counter] = TABLE[input[counter] as usize];
        counter = (counter + 1) % 10;
    }
    image
}

// for you cheaters: 6830672995

*/
